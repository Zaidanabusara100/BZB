#include <iostream>
#include <string>
using namespace std;
struct Node
{
	string data;
	int data2;
	int data3;
	string data4;
	Node* next;


};

class LinkedList {
	Node* head;
public:
	LinkedList() {
		head = NULL;
	}
	void inseartAtHead(string data) {
		Node* newNode = new Node();
		newNode->data = data;
		newNode->next = head;
		head = newNode;
	}
	void inseartAtTail(string data) {
		Node* newNode = new Node();
		newNode->data = data;
		newNode->next = NULL;
		if (head == NULL) {
			head = newNode;
			return;
		}
		Node* temp = head;
		while (temp->next != NULL) {
			temp = temp->next;

		}
		temp->next = newNode;

	}
	void inseartAtPostion(int postion, string data) {
		Node* newNode = new Node();
		newNode->data = data;
		if (postion == 1) {
			newNode->next = head;
			head = newNode;
			return;
		}
		Node* temp = head;
		for (int i = 1; i < postion - 1 && temp != NULL; i++) {
			temp = temp->next;
		}
		if (temp == NULL) {
			cout << "postion out of the range" << endl;
			return;
		}
		newNode->next = temp->next;
		temp->next = newNode;
	}

	Node* search(string key) {
		Node* temp = head;
		while (temp != NULL) {
			if (temp->data == key) {
				cout << "Element found: " << temp->data << endl;
				return temp;
			}
			temp = temp->next;
		}
		cout << "Element not found." << endl;
		return NULL;
	}

	void display() {
		Node* temp = head;
		while (temp != NULL) {
			cout << temp->data << endl;
			temp = temp->next;
		}
	}
	void deleteHead() {
		if (head == NULL)return;
		Node* temp = head;
		head = head->next;
		delete temp;
	}
	void deleteTail() {
		if (head == NULL)return;
		if (head->next == NULL) {
			delete head;
			head = NULL;
			return;

			Node* temp = head;
			while (temp->next->next != NULL) {
				temp = temp->next;
			}
			delete temp->next;
			temp->next = NULL;
		}

	}
	void deleteAtPostion(int postion) {
		if (head == NULL)return;
		if (postion == 1) {
			Node* temp = head;
			head = head->next;
			delete temp;
		}
		Node* temp = head;
		for (int i = 1; i < postion - 1 && temp->next != NULL; i++) {
			temp = temp->next;
		}
		if (temp->next == NULL) {
			cout << "out of the range" << endl;
			return;
		}
		Node* nodeToDelete = temp->next;
		temp->next = nodeToDelete->next;
		delete nodeToDelete;
	}


}ob1;
class Enterlink : public LinkedList {
public:
	string link;
	int location;
	int postion;
	int i;
	int need;
	void Enterlink1() {
		do {
			cout << "Enter a linke you need?";
			cin >> link;
			cout << "were you need add a link?" << endl;
			cout << "1-in first  2-in postion  3-in last  ?";
			cin >> location;
			if (location == 1) {
				ob1.inseartAtHead(link);
			}
			else if (location == 3) {
				ob1.inseartAtTail(link);
			}
			else if (location == 2) {
				cout << "Enter a postion" << endl;
				cin >> postion;
				ob1.inseartAtPostion(postion, link);
			}
			cout << "1-Enter more   0 -exat ?";
			cin >> i;

			ob1.display();
			if (i == 0)
				break;
			else if (i == 1) {
				continue;
			}
			else
				cout << "envaled couise" << endl;
		} while (i == 1 && i != 0);
		cout << "you need make search ? 1-Yes 2-No" << endl;
		cin >> need;
		if (need == 1) {
			string searchKey;
			cout << "Enter element to search: ";
			cin >> searchKey;
			ob1.search(searchKey);
		}



	}
}ob2;
class Deletelink : public LinkedList {
public:
	int location;
	int postion;
	int i;
	void Deletelink1() {
		do {

			cout << "were you need delete a link?" << endl;
			cout << "1-from first  2-from postion  3-from last  ?";
			cin >> location;
			if (location == 1) {
				ob1.deleteHead();
			}
			else if (location == 3) {
				ob1.deleteTail();
			}
			else if (location == 2) {
				cout << "Enter a postion" << endl;
				cin >> postion;
				ob1.deleteAtPostion(postion);
			}
			cout << "1-delete more   0 -exat ?";
			cin >> i;

			ob1.display();
			if (i == 0)
				break;
		} while (i != 0);
	}
}ob3;

class Queue {
public:
	Node* front;
	Node* rear;

	Queue() {
		front = rear = NULL;
	}

	bool isEmpty() {
		return front == NULL && rear == NULL;
	}

	// تعديل الدالة لاستقبال string
	void Enqueue(string item) {
		Node* newNode = new Node();
		newNode->data4 = item;
		if (isEmpty())
			front = rear = newNode;
		else {
			rear->next = newNode;
			rear = newNode;
		}
	}

	void display() {
		int i = 1;
		if (isEmpty()) {
			cout << "there is no data" << endl;
		}
		else {
			Node* temp = front;
			while (temp != NULL) {
				cout << "lucture " << i << " starts at: " << temp->data4 << endl;
				i++;
				temp = temp->next;
			}
		}
	}
}ob4;

// تحويل الوقت إلى دقائق منذ منتصف الليل
int convertToMinutes(int hour, string period) {
	int minutes = (hour % 12) * 60;  // تحويل الساعة إلى دقائق
	if (period == "PM") {
		minutes += 12 * 60;  // إضافة 12 ساعة إذا كان PM
	}
	return minutes;
}

// فرز باستخدام Selection Sort
void selectionSort(int times[], int n) {
	for (int i = 0; i < n - 1; i++) {
		int minIndex = i;
		for (int j = i + 1; j < n; j++) {
			if (times[j] < times[minIndex]) {
				minIndex = j;
			}
		}
		swap(times[i], times[minIndex]);
	}
}

// تحويل الدقائق إلى تنسيق 12 ساعة
string convertTo12Hour(int minutes) {
	int hour24 = minutes / 60;
	int hour12 = hour24 % 12;
	if (hour12 == 0) hour12 = 12;
	string period = (hour24 >= 12) ? "PM" : "AM";
	return to_string(hour12) + " " + period;
}

class Stack {
	Node* top;
public:
	Stack() {
		top = NULL;
	}
	bool isEmpty() {
		if (top == NULL)return true;
		else return false;
	}
	bool isFull() {
		Node* ptr = new Node();
		if (ptr == NULL)
			cout << "the stack id full" << endl;
	}
	void push(int item) {
		Node* newNode = new Node();
		newNode->data3 = item;
		if (isEmpty()) {
			newNode->next = NULL;
			top = newNode;
		}
		else {
			newNode->next = top;
			top = newNode;
		}

	}
	int pop() {
		int value;
		Node* delptr = top;
		value = top->data3;
		top = top->next;
		delete delptr;
		return value;

	}int tot = 0;
	void display() {
		int i = 1;


		Node* temp = top;
		while (temp != NULL) {
			cout << "hour in " << i << " year=" << temp->data3 << endl;
			i++;
			tot += temp->data3;
			temp = temp->next;
		}



	}
	void mony() {
		int specialisation;
		double coust;
		cout << "what is your specialisation" << endl;
		cout << "1-CoS 2-SE 3-AI 4-CyS" << endl;
		cin >> specialisation;
		if (specialisation == 1) {
			coust = (tot * 48) + 450;
			cout << coust << "JD" << endl;
		}
		else if (specialisation == 2) {
			coust = (tot * 58.5) + 450;
			cout << coust << "JD" << endl;
		}
		else if (specialisation == 3) {
			coust = (tot * 50) + 450;
			cout << coust << "JD" << endl;
		}
		else if (specialisation == 4) {
			coust = (tot * 58.5) + 450;
			cout << "You paid for University :" << coust << "JD" << endl;
		}
		else
			cout << "envaled " << endl;
	}
}ob5;

// تعريف كلاس Tree لهيكلة الشجرة وتنظيم الدوال
class Tree {
	struct Node {
		int studentID; // رقم الطالب الجامعي
		Node* left;    // الفرع الأيسر
		Node* right;   // الفرع الأيمن

		Node(int id) : studentID(id), left(nullptr), right(nullptr) {}
	};

	Node* root; // جذر الشجرة

public:
	Tree() : root(nullptr) {}

	// دالة لإضافة طالب جديد إلى الشجرة
	void insert(int studentID) {
		root = insertRec(root, studentID);
	}

	// دالة للبحث عن طالب برقم معين
	bool search(int studentID) {
		return searchRec(root, studentID);
	}

	// دالة لعرض جميع أرقام الطلاب بترتيب تصاعدي
	void inorderTraversal() {
		inorderTraversalRec(root);
	}

private:
	Node* insertRec(Node* node, int studentID) {
		if (!node) {
			return new Node(studentID);
		}

		if (studentID < node->studentID) {
			node->left = insertRec(node->left, studentID);
		}
		else {
			node->right = insertRec(node->right, studentID);
		}

		return node;
	}

	bool searchRec(Node* node, int studentID) {
		if (!node) return false;

		if (node->studentID == studentID) return true;

		if (studentID < node->studentID) {
			return searchRec(node->left, studentID);
		}
		else {
			return searchRec(node->right, studentID);
		}
	}

	void inorderTraversalRec(Node* node) {
		if (!node) return;

		inorderTraversalRec(node->left);
		cout << node->studentID << " ";
		inorderTraversalRec(node->right);
	}
};


int main()
{

	int x;
	int i{};
	int need;
	cout << "Enter what you need ?\n1- Entering the student's information \n2- Making a daily lecture schedule \n3- Statement of account for your study period  \n4- Entry for the university Student : ID " << endl;
	cin >> need;
	if (need == 1) {
		do {
			bool valid = false;

			while (!valid) {
				cout << "1-add link  2-delete link  3-exit" << endl;
				cin >> x;
				if (x == 1) {
					ob2.Enterlink1();
					valid = true;
				}
				else if (x == 2) {
					ob3.Deletelink1();
					valid = true;
				}
				else if (x == 3) {
					cout << "Thank you " << endl;
					valid = true;
					break;
				}
				else {
					cout << "Invalid choice. Please enter 1, 2, or 3." << endl;
				}
			}
		} while (x != 3);
	}
	else  if (need == 2) {




		int number, hour;
		string period;
		cout << "Enter number of lectures for day: ";
		cin >> number;

		int* times = new int[number];  // مصفوفة لتخزين الأوقات بالدقائق

		// إدخال الأوقات
		for (int i = 0; i < number; i++) {
			cout << "Enter hour for lecture " << i + 1 << " (1-12): ";
			cin >> hour;
			cout << "AM or PM? ";
			cin >> period;

			times[i] = convertToMinutes(hour, period);
		}

		// فرز الأوقات
		selectionSort(times, number);

		// إدخال الأوقات المرتبة إلى الطابور وعرضها بالنظام 12 ساعة
		for (int i = 0; i < number; i++) {
			ob4.Enqueue(convertTo12Hour(times[i]));  // الآن تعمل بشكل صحيح
		}

		ob4.display();
		delete[] times;
	}

	else if (need == 3) {
		int year;
		int first;
		int secound;
		int theard;
		cout << "what your year in University ?" ;
		cin >> year;

		for (int i = year; i >= 1; i--) {
			cout << "Enter hour for year " << i << " :" << endl;
			cout << "Enter hour for the first semester ?";
			cin >> first;
			cout << "Enter hour for the secound semester ?";
			cin >> secound;
			cout << "Enter hour for the summer semester ?";
			cin >> theard;



			int sum;
			sum = first + secound + theard;
			ob5.push(sum);
		}
		ob5.display();
		ob5.mony();

	}
	else if (need == 4) {
		Tree tree;

		int choice, studentID;

		cout << "=== University Student Management System ===" << endl;

		do {
			cout << "\n1. Add Student ID\n2. Search Student ID\n3. Display All Student IDs\n4. Exit\n";
			cout << "Enter your choice: ";
			cin >> choice;

			switch (choice) {
			case 1:
				cout << "Enter the Student ID to add: ";
				cin >> studentID;
				tree.insert(studentID);
				cout << "Student ID " << studentID << " added successfully!" << endl;
				break;

			case 2:
				cout << "Enter the Student ID to search: ";
				cin >> studentID;
				if (tree.search(studentID)) {
					cout << "Student ID " << studentID << " found in the system." << endl;
				}
				else {
					cout << "Student ID " << studentID << " not found in the system." << endl;
				}
				break;

			case 3:
				cout << "All Student IDs (in ascending order): ";
				tree.inorderTraversal();
				cout << endl;
				break;

			case 4:
				cout << "Exiting the system. Goodbye!" << endl;
				break;

			default:
				cout << "Invalid choice. Please try again." << endl;
			}
		} while (choice != 4);



	}
	else {
		cout << "envaled cohess" << endl;
	}


}
