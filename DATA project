#include <iostream>
using namespace std;
struct Node
{
	string data;
	int data2;
	int data3;
	Node* next;
};

class LinkedList {
	Node* head;
public:
	LinkedList() {
		head = NULL;
	}
	void inseartAtHead(string data) {
		Node* newNode = new Node();
		newNode->data = data;
		newNode->next = head;
		head = newNode;
	}
	void inseartAtTail(string data) {
		Node* newNode = new Node();
		newNode->data = data;
		newNode->next = NULL;
		if (head == NULL) {
			head = newNode;
			return;
		}
		Node* temp = head;
		while (temp->next != NULL) {
			temp = temp->next;

		}
		temp->next = newNode;

	}
	void inseartAtPostion(int postion, string data) {
		Node* newNode = new Node();
		newNode->data = data;
		if (postion == 1) {
			newNode->next = head;
			head = newNode;
			return;
		}
		Node* temp = head;
		for (int i = 1; i < postion - 1 && temp != NULL; i++) {
			temp = temp->next;
		}
		if (temp == NULL) {
			cout << "postion out of the range" << endl;
			return;
		}
		newNode->next = temp->next;
		temp->next = newNode;
	}
	void display() {
		Node* temp = head;
		while (temp != NULL) {
			cout << temp->data << endl;
			temp = temp->next;
		}
	}
	void deleteHead() {
		if (head == NULL)return;
		Node* temp = head;
		head = head->next;
		delete temp;
	}
	void deleteTail() {
		if (head == NULL)return;
		if (head->next == NULL) {
			delete head;
			head = NULL;
			return;

			Node* temp = head;
			while (temp->next->next != NULL) {
				temp = temp->next;
			}
			delete temp->next;
			temp->next = NULL;
		}

	}
	void deleteAtPostion(int postion) {
		if (head == NULL)return;
		if (postion == 1) {
			Node* temp = head;
			head = head->next;
			delete temp;
		}
		Node* temp = head;
		for (int i = 1; i < postion - 1 && temp->next != NULL; i++) {
			temp = temp->next;
		}
		if (temp->next == NULL) {
			cout << "out of the range" << endl;
			return;
		}
		Node* nodeToDelete = temp->next;
		temp->next = nodeToDelete->next;
		delete nodeToDelete;
	}


}ob1;
class Enterlink : public LinkedList {
public:
	string link;
	int location;
	int postion;
	int i;
	void Enterlink1() {
		do {
			cout << "Enter a linke you need?";
			cin >> link;
			cout << "were you need add a link?" << endl;
			cout << "1-in head  2-in postion  3-in Tail  ?";
			cin >> location;
			if (location == 1) {
				ob1.inseartAtHead(link);
			}
			else if (location == 3) {
				ob1.inseartAtTail(link);
			}
			else if (location == 2) {
				cout << "Enter a postion" << endl;
				cin >> postion;
				ob1.inseartAtPostion(postion, link);
			}
			cout << "1-Enter more   0 -exat ?";
			cin >> i;

			ob1.display();
			if (i == 0)
				break;
			else
				cout << "envaled couise" << endl;
		} while (i == 1 && i != 0);
	}
}ob2;
class Deletelink : public LinkedList {
public:
	int location;
	int postion;
	int i;
	void Deletelink1() {
		do {

			cout << "were you need delete a link?" << endl;
			cout << "1-from head  2-from postion  3-from Tail  ?";
			cin >> location;
			if (location == 1) {
				ob1.deleteHead();
			}
			else if (location == 3) {
				ob1.deleteTail();
			}
			else if (location == 2) {
				cout << "Enter a postion" << endl;
				cin >> postion;
				ob1.deleteAtPostion(postion);
			}
			cout << "1-delete more   0 -exat ?";
			cin >> i;

			ob1.display();
			if (i == 0)
				break;
		} while (i != 0);
	}
}ob3;

class Queue {
public:

	Node* front;
	Node* rear;
	Queue() {
		front = rear = NULL;
	}
	bool isEmpty() {
		if (front == NULL && rear == NULL) {
			return true;
		}
		else {
			return false;
		}
	}
	void Enqueue(int item) {
		Node* newNode = new Node();
		newNode->data2 = item;
		if (isEmpty())
			front = rear = newNode;
		else {
			rear->next = newNode;
			rear = newNode;
		}

	}
	void Dequeue() {
		int delvalue;
		if (isEmpty()) {
			cout << "there is no data" << endl;
		}
		else if (front == rear) {
			delete front;
			front = rear = NULL;
		}
		else {
			Node* delptr = front;
			front = front->next;
			delvalue = delptr->data2;
			delete delptr;

		}
	}
	void display() {
		int i = 1;
		if (isEmpty()) {
			cout << "there is no data" << endl;
		}
		else {
			Node* temp = front;
			while (temp != NULL) {
				cout << "mohadra " << i << " started at :" << temp->data2 << " " << endl;
				i++;
				temp = temp->next;
			}
		}
	}
}ob4;

class Stack {
	Node* top;
public:
	Stack() {
		top = NULL;
	}
	bool isEmpty() {
		if (top == NULL)return true;
		else return false;
	}
	bool isFull() {
		Node* ptr = new Node();
		if (ptr == NULL)
			cout << "the stack id full" << endl;
	}
	void push(int item) {
		Node* newNode = new Node();
		newNode->data3 = item;
		if (isEmpty()) {
			newNode->next = NULL;
			top = newNode;
		}
		else {
			newNode->next = top;
			top = newNode;
		}

	}
	int pop() {
		int value;
		Node* delptr = top;
		value = top->data3;
		top = top->next;
		delete delptr;
		return value;

	}int tot = 0;
	void display() {
		int i = 1;


		Node* temp = top;
		while (temp != NULL) {
			cout << "hour in " << i << " year=" << temp->data3 << endl;
			i++;
			tot += temp->data3;
			temp = temp->next;
		}



	}
	void mony() {
		int specialisation;
		double coust;
		cout << "what is your specialisation" << endl;
		cout << "1-CoS 2-SE 3-AI 4-CyS" << endl;
		cin >> specialisation;
		if (specialisation == 1) {
			coust = (tot * 48) + 450;
			cout << coust << "JD" << endl;
		}
		else if (specialisation == 2) {
			coust = (tot * 58.5) + 450;
			cout << coust << "JD" << endl;
		}
		else if (specialisation == 3) {
			coust = (tot * 50) + 450;
			cout << coust << "JD" << endl;
		}
		else if (specialisation == 4) {
			coust = (tot * 58.5) + 450;
			cout << coust << "JD" << endl;
		}
		else
			cout << "envaled " << endl;
	}
}ob5;

int main()
{

	int x;
	int i{};
	int need;
	cout << "enter what you need ? 1-linkedlist 2-queue 3-stack" << endl;
	cin >> need;
	if (need == 1) {
		do {
			bool valid = false;

			while (!valid) {
			cout << "1-add link  2-delete link  3-exit" << endl;
			cin >> x;
			if (x == 1) {
				ob2.Enterlink1();
				valid = true;
			}
			else if (x == 2) {
				ob3.Deletelink1();
				valid = true;
			}
			else if (x == 3) {
				cout << "Thank you " << endl;
				valid = true;
				break;
			}
			else{
				cout << "Invalid choice. Please enter 1, 2, or 3." << endl;
			}
			}
			cout << "1-add link  2-delete link  3-exit ? ";
			cin >> x;
			ob1.display();
		} while (x != 3);
	}
	else if (need == 2) {
		int number;
		int time;
		cout << "inter number of mohadrat ?";
		cin >> number;
		for (int i = 1; i < number + 1; i++) {
			cout << "Enter a time for " << i << " mohadrah ?";
			cin >> time;
			ob4.Enqueue(time);
		}
		ob4.display();
	}
	else if (need == 3) {
		int year;
		int first;
		int secound;
		int theard;
		cout << "what your year in un ?" << endl;
		cin >> year;

		for (int i = year; i >= 1; i--) {
			cout << "enter hour for year " << i << " ?" << endl;
			cout << "enter hour for first ?";
			cin >> first;
			cout << "enter hour for secound ?";
			cin >> secound;
			cout << "enter hour for sumure ?";
			cin >> theard;



			int sum;
			sum = first + secound + theard;
			ob5.push(sum);
		}
		ob5.display();
		ob5.mony();

	}
	else {
		cout << "envaled cohess" << endl;
	}


}
